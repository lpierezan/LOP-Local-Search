ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
#,select = c(fo_mean)
)
rownames(ret)[i] = toString(ndi_combinations[i,]);
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
ret
ret
ret = matrix(nrow(ndi_combinations),nrow(alg_combinations));
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,]);
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
#,select = c(fo_mean)
)
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
ret
ret = matrix(nrow(ndi_combinations),nrow(alg_combinations));
ret
ndi_combinations
nrow(ndi_combinations)
ret
matrix(10,2)
ret = matrix(nrow = nrow(ndi_combinations),ncol = nrow(alg_combinations));
ret
ret = matrix(nrow = nrow(ndi_combinations),ncol = nrow(alg_combinations));
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,]);
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
#,select = c(fo_mean)
)
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
print(i)
rownames(ret)[i] = toString(ndi_combinations[i,]);
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
#,select = c(fo_mean)
)
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
ret
rownames(ret)[i] = toString(ndi_combinations[i,]);
rownames(ret)[1] = toString(ndi_combinations[1,]);
toString(ndi_combinations[1,])
toString(ndi_combinations[1,1])
toString(ndi_combinations[1,])
rownames(ret)[1]
rownames(ret)[1] = toString(ndi_combinations[1,])
rownames(ret)[1] = toString(toString(ndi_combinations[1,]))
rownames(ret)[1] = toString(ndi_combinations[1,])
toString(ndi_combinations[1,])
toString(ndi_combinations[1,])[1]
toString(ndi_combinations[1,])[2]
toString(ndi_combinations[1,])[3]
toString(ndi_combinations[1,])[1]
x = toString(ndi_combinations[1,])
rownames(ret)[1] = x
rownames(ret)[1] = "o"
rownames(ret)
ret
rownames(ret)[1] = "oi"
dimnames(ret)
dimnames(ret) = c("Inst","Alg")
dimnames(ret) = list("Inst","Alg")
rownames(ret)[1] = "oi"
colnames(ret)[1] = "oi"
ret
mm
rownames(mm)
rownames(ret)[1] = "oi"
rownames(mm) = c("A","B","C")
mm
dimnames(mm)
ret
rownames(ret) = c()
ret
rownames(ret)[1]
rownames(ret)[1] = "oi"
rownames(ret) = c(1:25)
ret
rownames(ret)[1] = "oi"
ret
rep("",2)
rep("",4)
setwd("C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2")
data = read.csv("report.txt", sep = ' ', comment.char = '!')
ndi_combinations = unique(cbind(data$n,data$d,data$i))
ls_names = unique(data$ls_name)
strg_names = unique(data$move_strg)
alg_combinations = rbind(
c("tree","first_move"),
c("tree","best_move")
)
ret = matrix(nrow = nrow(ndi_combinations),ncol = nrow(alg_combinations));
rownames(ret) = rep("",nrow(ret));
colnames(ret) = rep("",ncol(rep));
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,])
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
#,select = c(fo_mean)
)
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
ret
rownames(ret)[1] = toString(ndi_combinations[1,])
colnames(ret)[j] = toString(alg_combinations[j,]);
colnames(ret)[1] = toString(alg_combinations[1,]);
toString(alg_combinations[1,])
colnames(ret)
colnames(ret) = rep("",2)
ret
colnames(ret)
setwd("C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2")
data = read.csv("report.txt", sep = ' ', comment.char = '!')
ndi_combinations = unique(cbind(data$n,data$d,data$i))
ls_names = unique(data$ls_name)
strg_names = unique(data$move_strg)
alg_combinations = rbind(
c("tree","first_move"),
c("tree","best_move")
)
ret = matrix(nrow = nrow(ndi_combinations),ncol = nrow(alg_combinations));
rownames(ret) = rep("",nrow(ret));
colnames(ret) = rep("",ncol(ret));
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,])
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
#,select = c(fo_mean)
)
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
ret
ret[1,1] = data[1,]
ret[1,1] = toString(data[1,])
ret
setwd("C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2")
data = read.csv("report.txt", sep = ' ', comment.char = '!')
ndi_combinations = unique(cbind(data$n,data$d,data$i))
ls_names = unique(data$ls_name)
strg_names = unique(data$move_strg)
alg_combinations = rbind(
c("tree","first_move"),
c("tree","best_move")
)
ret = matrix(nrow = nrow(ndi_combinations),ncol = nrow(alg_combinations));
rownames(ret) = rep("",nrow(ret));
colnames(ret) = rep("",ncol(ret));
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,])
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
,select = c(fo_mean)
);
ret[i,j] = selected_dt$fo_mean;
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
ret
view(ret)
ret[,1] > ret[,2]
t(ret[,1] > ret[,2])
ret[,1] > ret[,2]
table(ret[,1] > ret[,2])
setwd("C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2")
data = read.csv("report.txt", sep = ' ', comment.char = '!')
ndi_combinations = unique(cbind(data$n,data$d,data$i))
ls_names = unique(data$ls_name)
strg_names = unique(data$move_strg)
alg_combinations = rbind(
c("tree","first_move"),
c("tree","best_move")
)
ret = matrix(nrow = nrow(ndi_combinations),ncol = nrow(alg_combinations));
rownames(ret) = rep("",nrow(ret));
colnames(ret) = rep("",ncol(ret));
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,])
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
,select = c(fo_mean)
);
ret[i,j] = selected_dt$fo_mean;
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
print("Number of times that tree-first fo_mean was better than tree-best fo_mean")
table(ret[,1] > ret[,2])
setwd("C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2")
data = read.csv("report.txt", sep = ' ', comment.char = '!')
ndi_combinations = unique(cbind(data$n,data$d,data$i))
ls_names = unique(data$ls_name)
strg_names = unique(data$move_strg)
alg_combinations = rbind(
c("tree","first_move"),
c("tree","best_move")
)
ret = matrix(nrow = nrow(ndi_combinations),ncol = nrow(alg_combinations));
rownames(ret) = rep("",nrow(ret));
colnames(ret) = rep("",ncol(ret));
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,])
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
,select = c(fo_mean)
);
ret[i,j] = selected_dt$fo_mean;
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
print("Fo mean btw tree-first and tree-best")
ret;
print("Number of times that tree-first fo_mean was better than tree-best fo_mean")
table(ret[,1] > ret[,2])
source(tl_analysis)
source(tl_analysis.R)
source('C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2/tl_analysis.R')
source('C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2/tl_analysis.R')
source('C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2/tl_analysis.R')
source('C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2/tl_analysis.R')
source('C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2/tl_analysis.R')
source('C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2/tl_analysis.R')
source('C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2/tl_analysis.R')
source('C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2/tl_analysis.R')
source('C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2/tl_analysis.R')
source('C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2/tl_analysis.R')
source('C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2/tl_analysis.R')
setwd("C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2")
data = read.csv("report.txt", sep = ' ', comment.char = '!')
ndi_combinations = unique(cbind(data$n,data$d,data$i))
ls_names = unique(data$ls_name)
strg_names = unique(data$move_strg)
alg_combinations = rbind(
c("tree","first_move"),
c("tree","best_move")
)
ret = matrix(nrow = nrow(ndi_combinations),ncol = nrow(alg_combinations));
rownames(ret) = rep("",nrow(ret));
colnames(ret) = rep("",ncol(ret));
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,])
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
,select = c(fo_mean,fo_sd)
);
cv_ = selected_dt$fo_sd/selected_dt$fo_mean;
ret[i,j] = paste(selected_dt$fo_mean, " ", cv_, width = 3);
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
print("Objective Function Mean after 85 sec repeatedly local searching")
print(ret)
print("Tree-first fo_mean  > Tree-best?");
print(table(ret[,1] > ret[,2]))
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,])
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
,select = c(fo_mean,fo_sd)
);
cv_ = selected_dt$fo_sd/selected_dt$fo_mean;
ret[i,j] = paste(selected_dt$fo_mean, " ", cv_, width = 30);
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
setwd("C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2")
data = read.csv("report.txt", sep = ' ', comment.char = '!')
ndi_combinations = unique(cbind(data$n,data$d,data$i))
ls_names = unique(data$ls_name)
strg_names = unique(data$move_strg)
alg_combinations = rbind(
c("tree","first_move"),
c("tree","best_move")
)
ret = matrix(nrow = nrow(ndi_combinations),ncol = nrow(alg_combinations));
rownames(ret) = rep("",nrow(ret));
colnames(ret) = rep("",ncol(ret));
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,])
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
,select = c(fo_mean,fo_sd)
);
cv_ = selected_dt$fo_sd/selected_dt$fo_mean;
ret[i,j] = paste(selected_dt$fo_mean, " ", cv_, width = 30);
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
print("Objective Function Mean after 85 sec repeatedly local searching")
print(ret)
print("Tree-first fo_mean  > Tree-best?");
print(table(ret[,1] > ret[,2]))
setwd("C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2")
data = read.csv("report.txt", sep = ' ', comment.char = '!')
ndi_combinations = unique(cbind(data$n,data$d,data$i))
ls_names = unique(data$ls_name)
strg_names = unique(data$move_strg)
alg_combinations = rbind(
c("tree","first_move"),
c("tree","best_move")
)
ret = matrix(nrow = nrow(ndi_combinations),ncol = nrow(alg_combinations));
rownames(ret) = rep("",nrow(ret));
colnames(ret) = rep("",ncol(ret));
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,])
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
,select = c(fo_mean,fo_sd)
);
cv_ = selected_dt$fo_sd/selected_dt$fo_mean;
ret[i,j] = paste(selected_dt$fo_mean, " ", round(cv_,4));
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
print("Objective Function Mean after 85 sec repeatedly local searching")
print(ret)
print("Tree-first fo_mean  > Tree-best?");
print(table(ret[,1] > ret[,2]))
setwd("C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2")
data = read.csv("report.txt", sep = ' ', comment.char = '!')
ndi_combinations = unique(cbind(data$n,data$d,data$i))
ls_names = unique(data$ls_name)
strg_names = unique(data$move_strg)
alg_combinations = rbind(
c("tree","first_move"),
c("tree","best_move")
)
ret = matrix(nrow = nrow(ndi_combinations),ncol = nrow(alg_combinations));
rownames(ret) = rep("",nrow(ret));
colnames(ret) = rep("",ncol(ret));
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,])
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
,select = c(fo_mean,fo_sd)
);
cv_ = selected_dt$fo_sd/selected_dt$fo_mean;
ret[i,j] = paste(selected_dt$fo_mean, " ", round(cv_,5));
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
print("Objective Function Mean after 85 sec repeatedly local searching")
print(ret)
print("Tree-first fo_mean  > Tree-best?");
print(table(ret[,1] > ret[,2]))
setwd("C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2")
data = read.csv("report.txt", sep = ' ', comment.char = '!')
ndi_combinations = unique(cbind(data$n,data$d,data$i))
ls_names = unique(data$ls_name)
strg_names = unique(data$move_strg)
alg_combinations = rbind(
c("tree","first_move"),
c("tree","best_move")
)
ret = matrix(nrow = nrow(ndi_combinations),ncol = nrow(alg_combinations));
rownames(ret) = rep("",nrow(ret));
colnames(ret) = rep("",ncol(ret));
#foreach ndi comb
#foreach alg_comb
#get data for ndi-alg
for (i in 1:nrow(ndi_combinations))
{
nn = ndi_combinations[i,1]; dd = ndi_combinations[i,2]; ii = ndi_combinations[i,3];
rownames(ret)[i] = toString(ndi_combinations[i,])
for(j in 1:nrow(alg_combinations)){
#print(ndi_combinations[i,]); print(alg_combinations[j,]);
ls_name_ = alg_combinations[j,1]; mv_name_ = alg_combinations[j,2];
#select data from ndi-alg
selected_dt = subset(data , n == nn & d == dd & i == ii &
ls_name == ls_name_ & move_strg == mv_name_
,select = c(fo_mean,fo_sd)
);
cv_ = selected_dt$fo_sd/selected_dt$fo_mean;
ret[i,j] = paste(selected_dt$fo_mean, " (", round(cv_,5), ")");
colnames(ret)[j] = toString(alg_combinations[j,]);
}
}
print("Objective Function Mean after 85 sec repeatedly local searching")
print(ret)
print("Tree-first fo_mean  > Tree-best?");
print(table(ret[,1] > ret[,2]))
source('C:/Users/Lucas/Cursos/PucRio/Metaheuristicas/Projeto1/Projeto1_LOP/Projeto1_LOP/ls analysis 2/tl_analysis.R')
write.table(ret,"teste")
